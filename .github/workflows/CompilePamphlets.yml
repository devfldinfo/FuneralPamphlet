name: Compile LaTeX Files

on:
  push:
    paths:
      - 'input/**/start.start'
  pull_request:
    paths:
      - 'input/**/start.start'
  workflow_dispatch:

permissions:
  contents: write  # Grant write access for committing and pushing

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install LaTeX and PDF Utilities # <--- MODIFIED STEP
        uses: dante-ev/setup-texlive-action@v1
        with:
          # The 'profile' defines the installation scheme.
          # 'full' (or 'scheme-full') is comprehensive and covers your previous apt-get packages.
          # The main benefit here is the caching mechanism, not necessarily a smaller install.
          # If you truly need minimal installs, you could try 'basic' or 'medium'
          # and then list specific packages using the 'packages' input, e.g.:
          # packages: >
          #   latex-base latex-extra fonts-recommended xetex
          #   bibtex-extra biber extra-utils
          profile: 'full' # Using 'full' to ensure all your previously installed components are present
          # You can also specify the TeX Live year if needed, e.g., 'texlive-year: 2023'

      - name: Create Output Directory
        run: mkdir -p output

      - name: Compile LaTeX Files
        run: |
          for file in input/*.txt; do
            original_base_name=$(basename "$file" .txt)
            target_tex_file="output/${original_base_name}.tex" # The .tex file we'll compile
            target_pdf_file="output/${original_base_name}.pdf" # The final PDF name expected

            echo "--- Processing: $file ---"
            echo "  Temp .tex for compilation: $target_tex_file"
            echo "  Expected output PDF: $target_pdf_file"

            # Step 1: Copy the .txt content to a .tex file in the output directory
            cp "$file" "$target_tex_file"

            # Step 2: Run LuaLaTeX (first pass)
            # The '//' prefix tells LuaLaTeX to treat the filename literally,
            # handling special characters like '~' and multiple periods correctly.
            lualatex -interaction=nonstopmode "//${target_tex_file}"

            # Step 3: If .bcf file exists, run Biber
            if [ -f "output/${original_base_name}.bcf" ]; then
              echo "  Running Biber for ${original_base_name}"
              biber "output/${original_base_name}"
            fi

            # Step 4: Second LuaLaTeX run
            lualatex -interaction=nonstopmode "//${target_tex_file}"

            # Step 5: Third LuaLaTeX run
            lualatex -interaction=nonstopmode "//${target_tex_file}"

            # --- Validation and Cleanup for current file ---
            if [ ! -f "$target_pdf_file" ]; then
              echo "::error file=$file::PDF file ($target_pdf_file) was NOT created successfully for input $file."
              exit 1 # Fail the step if PDF is not found
            else
              echo "  Successfully created $target_pdf_file"
            fi

            # Clean up the temporary .tex file after compilation for this specific pamphlet
            rm "$target_tex_file"

            echo "--- Finished processing: $file ---"
          done

      # Note: The commented-out 'Rename output PDF' and 'Generate Booklet PDFs'
      # steps from your original script are left commented here as they were.
      # If you wish to use them, uncomment and ensure `pdfjam` is installed.

      - name: Delete Temporary LaTeX Files
        run: rm -f output/*.{aux,log,lof,lot,toc,bbl,blg,out,synctex.gz,fdb_latexmk,fls,bcf,run.xml}

      - name: Auto Commit PDFs
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Compiled LaTeX files"
          push_options: '--force'
          file_pattern: 'output/*.pdf'

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: compiled-pamphlets
          path: output/*.pdf
